Annotated Bibliography

“Ruby Programming Language - Full Course.” YouTube, uploaded by freeCodeCamp.org, June 6, 2018, www.youtube.com/watch?v=t_ispmWmdjY.

This Youtube video taught us the basics of Ruby and how to start developing simple Ruby code. We carried the skills and knowledge this video taught us into creating a much more large-scale game.

Hunicke, Robin, Marc LeBlanc, and Robert Zubek. "MDA: A Formal Approach to Game Design and Game Research." Proceedings of the AAAI Workshop on Challenges in Game AI, 2004, pp. 1-5.

This article really helped us figure out how to organize my game. It talks about separating a game's Mechanics, Dynamics, and Aesthetics, which is exactly what I tried to do in my project. For example, We put all the combat logic and player actions in separate modules like CombatUtils to keep the game clean and easy to manage, which follows what the authors suggest in this paper.

Fabricatore, Carlo. "Gameplay and Game Mechanics Design: A Key to Quality in Videogames." ResearchGate, 2007.

Fabricatore focuses on how games should give players clear feedback during gameplay, which we did with the combat system and pauses after each interaction. In the game, when the player fights a boss or lands a critical hit, we made sure there are clear messages or dramatic text effects to show what’s happening. This came directly from reading about how important player feedback is for engagement.

Sicart, Miguel. "Defining Game Mechanics." Game Studies, vol. 8, no. 2, 2008.

This source was helpful for designing how players interact with our game. Sicart describes game mechanics as the methods players use to interact with the game world in an object-oriented language context, which influenced how we structured things like using items or exploring rooms.We made separate methods for player actions like use_item or explore_sub_area to make the code organized and reflect this idea.

Ruby-Doc.org. "Module: YAML (Ruby 2.5.1)." Ruby Documentation, https://ruby-doc.org/stdlib-2.5.1/libdoc/yaml/rdoc/YAML.html.

We used this source a lot while figuring out how to save and load data in the game. The Ruby docs explained how to use YAML in Ruby, which we used in or SaveSystem to save the player's progress and load game settings from config.yml. This was really helpful for making the game data-driven and easy to update while being compact.

Wilde, Kristen Fletcher. "Saving/Retrieving Data With a YAML File in Ruby: The Basics." Medium, 2017.

This tutorial was great for learning the basics of working with YAML in Ruby.We followed the examples to build out my own GameConfig class so that we could store things like starting health, enemy types, items, etc. in a separate YAML file. It made the  project more organized because we didn’t have to hard-code everything.


MIT DSpace. "Levenshtein Distance, Sequence Comparison and Biological Database Search." 2020.

Although this article is more focused on Levenshtein distance in another context (Biology). The brief introduction helped us understand how Levenshtein distance works and why it's useful for searching or comparing text. We used this in our correct_input method so that if the player accidentally types a command wrong, the game will still recognize what they meant if it's close enough. This was cool because it made the game feel more polished and forgiving.

MDPI Information. "Toward Efficient Similarity Search under Edit Distance on Hybrid CPU-GPU Platforms." Information, vol. 13, no. 10, 2022.

This source made us think more about performance when using Levenshtein distance. The article talks about how checking strings with edit distance can slow things down, so we decided to only use typo correction for smaller sets of commands (and avoid large inputs in general) or directions in my game to avoid unnecessary lag.


